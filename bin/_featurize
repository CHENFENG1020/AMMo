#!/usr/bin/python3

import os
from argparse import ArgumentParser
import subprocess
from _settings import _project, _ammo, __parse_seeds


def __get_commands(seeds):
    commands = []

    for seed in seeds:
        if 'input_file' in _project['features']:
            if os.path.exists(f'{_ammo["location"]}/{_ammo["project"]}/.defaults/{_project["features"]["input_file"]}'):
                input_file = f'{_ammo["location"]}/{_ammo["project"]}/.defaults/{_project["features"]["input_file"]}'
            else:
                input_file = os.path.abspath(_project["features"]["input_file"])
            commands.append([['cd', f'snapshot_{seed}'],
                             ['cpptraj', '-i', input_file],
                             ['cd', '..']])
            continue
        for name, params in _project['features'].items():
            # add required arguments for running featurization
            feature_command = [_project['python'],
                               f'{os.environ["AMMO_HOME"]}/ammo/scripts/featurize.py',
                                '--topology', '../system-setup/system_dry.prm7',
                                '--trajectory', f'snapshot_{seed}/production_dry.nc',
                                '--output', f'snapshot_{seed}/{name}.txt']
            for key in params:
                if key == 'reference':
                    feature_command += [f'--{key}', f'../../../../inputs/{params[key]}']
                else:
                    feature_command += [f'--{key}', params[key]]
            commands.append(feature_command)
    
    return commands


def __write_input(seeds, system, state):
    slurm_file = 'feat.sh'

    with open(slurm_file, 'w') as file:
        # write file start
        file.writelines(['#!/bin/bash\n',
                        f'#SBATCH --job-name={system}_{state}_feat\n',
                         '#SBATCH --ntasks=1\n',
                         '#SBATCH --output=feat.out\n',
                        f'seeds="{" ".join([str(seed) for seed in seeds])}"\n',
                         'for seed in $seeds;do'])

        # check for input file
        if 'input_file' in _project['features']:
            if os.path.exists(f'{_ammo["location"]}/{_ammo["project"]}/.defaults/{_project["features"]["input_file"]}'):
                input_file = f'{_ammo["location"]}/{_ammo["project"]}/.defaults/{_project["features"]["input_file"]}'
            else:
                input_file = os.path.abspath(_project["features"]["input_file"])
            file.writelines([f'\ncd snapshot_$seed\n',
                             f'cpptraj -i {input_file}\n',
                             f'cd ..\ndone\n'])
            # stop here
            return [['sbatch', slurm_file]]
            
        # otherwise write out each feature
        # for every feature run featurization
        for name, params in _project['features'].items():
            file.writelines([f'\n  {_project["python"]}',
                             f' {os.environ["AMMO_HOME"]}/allostery/scripts/featurize.py',
                              ' --topology ', '../system-setup/system_dry.prm7',
                              ' --trajectory ', f'snapshot_$seed/production_dry.nc',
                              ' --output ', f'snapshot_$seed/{name}.txt'])
            for key in params:
                if key == 'reference':
                    file.writelines([f' --{key} ', f'"../../../../inputs/{params[key]}"'])
                else:
                    file.writelines([f' --{key} ', f'"{params[key]}"'])

        # write file end
        file.writelines(['\ndone\n'])
    
    return [['sbatch', slurm_file]]


def featurize(system, state, folder, seeds=None, slurm=False):
    # get seed indices
    if seeds is None:
        seeds = f'1-{_project["snapshot_number"]}'
    seeds = __parse_seeds(seeds)

    # go to seeded md directory
    os.chdir(f'{_ammo["location"]}/{_ammo["project"]}/systems/{system}/{state}/{folder}')

    # get commands to run
    # if slurm then write input file
    if slurm:
        commands = __write_input(seeds, system, state)
    # if not, get a command for each trajectory
    else:
        commands = __get_commands(seeds)
    
    # run
    for command in commands:
        subprocess.run(command)

    return None


def __main__():
    parser = ArgumentParser(description='Featurize seeded MD trajectories')
    parser.add_argument('--system', type=str, required=True, help='project system')
    parser.add_argument('--state', type=str, required=True, help='system state')
    parser.add_argument('--folder', type=str, default='seeded-md', help='seeded MD folder. Default : seeded-md')
    parser.add_argument('--seeds', type=str, help='Range for snapshot indices (separated by "-") or indices separated by ","')
    parser.add_argument('--slurm', action='store_true', help='Run featurization as a slurm job')
    args = parser.parse_args()

    featurize(args.system, args.state, args.folder, args.seeds, args.slurm)

    return None


if __name__ == '__main__':
    __main__()