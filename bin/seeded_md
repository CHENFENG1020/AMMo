#!/usr/bin/python3

import os
from argparse import ArgumentParser
import subprocess
from shutil import copyfile
import numpy as np
from _settings import _project, _allostery, __parse_seeds


def __setup_seeded(source, destination, seeds):
    print('Copying files...', end='')
    # create remote folder
    subprocess.run(['ssh', _project['cluster'], 'mkdir', '-p', f'{destination}/snapshots'])

    # copy topology
    topology = '/'.join(source.split('/')[:-1]) + '/system-setup/system.prm7'
    subprocess.run(['scp', topology, f"{_project['cluster']}:{destination}/."], stdout=subprocess.DEVNULL)

    # copy snapshots
    for seed in seeds:
        subprocess.run(['scp', f'{source}/snapshots/snapshot_{seed}.rst7', f"{_project['cluster']}:{destination}/snapshots/."], stdout=subprocess.DEVNULL)
    print('...done.')


def __write_input(source, destination, seeds, backup):
    print('Preparing job file...', end='')
    # read input file to determine scheduler
    input_file = f'{_allostery["location"]}/{_allostery["project"]}/.defaults/seeded-md.sh'
    with open(input_file, 'r') as file:
        input_contents = file.readlines()
    submit_command = None
    # find the submission command
    # and add working directory
    for line in input_contents:
        if "#SBATCH" in line: # slurm
            input_contents.insert(1, f'#SBATCH --chdir={destination}\n')
            array_id = '$SLURM_ARRAY_TASK_ID'
            submit_command = f'sbatch -a {",".join([str(idx) for idx in seeds])} {destination}/submit.sh'
            break
        elif "#$" in line: # grid engine
            input_contents.insert(1, f'#$ -wd {destination}\n')
            array_id = '$SGE_TASK_ID'
            # check if consecutive seeds
            if seeds == list(range(min(seeds), max(seeds)+1)):
                submit_command = f'qsub -t {",".join([str(idx) for idx in seeds])} {destination}/submit.sh {destination}'
            # if not, each has to be submitted separately
            else:
                submit_command = [f'qsub -t {idx} {destination}/submit.sh {destination}' for idx in seeds]
                submit_command = ' | '.join(submit_command)
            break
    # if no match found, raise error
    supported = ['slurm', 'grid engine']
    if submit_command is None:
        raise ValueError(f'Job submission file does not match any supported schedulers: {",".join(supported)}.')

    # write a temporary submission file
    # add backup lines if needed
    if _project['cluster'] is not None:
        if backup is not None:
            input_contents += [f'rsync -a --exclude snapshot_{array_id}/production.nc snapshot_{array_id} {_project["local"]}:{source}/.\n',
                               f'rsync -a --exclude snapshot_{array_id}/production_dry.nc snapshot_{array_id} {backup}/.\n']
        else:
            input_contents += [f'rsync -a snapshot_{array_id} {_project["local"]}:{source}/.\n']
    else:
        if backup is not None:
            input_contents += [f'rsync -a --exclude snapshot_{array_id}/production_dry.nc snapshot_{array_id} {backup}/.\n',
                               f'rm snapshot_{array_id}/production.nc\n']
    with open('/tmp/seeded_submission.sh', 'w') as file:
        file.writelines(input_contents)
    
    # copy job submission file
    if _project['cluster'] is not None:
        subprocess.run(['scp', '/tmp/seeded_submission.sh', f"{_project['cluster']}:{destination}/submit.sh"], stdout=subprocess.DEVNULL)
    else:
        copyfile('/tmp/seeded_submission.sh', f'{destination}/submit.sh')
    os.remove('/tmp/seeded_submission.sh')
    
    print('done.')

    return submit_command


def __submit_seeded(command):
    if _project['cluster'] is not None:
        subprocess.run(['ssh', _project['cluster']] + command.split())
    else:
        subprocess.run(command.split())


def seeded_md(system, state, folder='seeded-md', seeds=None, backup=True):
    # get seeds to run seeded MD for as a list of indices
    if seeds is None:
        seeds = f'1-{_project["snapshot_number"]}'
    seeds = __parse_seeds(seeds)

    # set full paths 
    source = f'{_allostery["location"]}/{_allostery["project"]}/systems/{system}/{state}/{folder}'
    if _project['cluster_path'] is not None:
        destination = f'{_project["cluster_path"]}/{system}/{state}/{folder}' # remote destination
    else:
        destination = source # local destination, same as source


    if backup:
        backup = f'{_project["backup"]}:{_project["backup_path"]}/{system}/{state}/{folder}'
        subprocess.run(['ssh', _project['backup'], 'mkdir', '-p', f'{_project["backup_path"]}/{system}/{state}/{folder}'])
    else:
        backup = None

    # setup for running seeded MD by creating
    # required folders and copying files
    if _project['cluster'] is not None:
        __setup_seeded(source, destination, seeds)
    else:
        print('Running seeded MD locally.')
    
    # prepare submission file
    submission_command = __write_input(source, destination, seeds, backup)

    # submit job
    __submit_seeded(submission_command)


def __main__():
    parser = ArgumentParser(description='Copy snapshots from a steered MD trajectory to a remote server and submit a job to run seeded MD simulations')
    parser.add_argument('--system', type=str, required=True, help='project system')
    parser.add_argument('--state', type=str, required=True, help='system state')
    parser.add_argument('--folder', type=str, default='seeded-md', help='seeded MD folder. Default : seeded-md')
    parser.add_argument('--seeds', type=str, help='Range for seed snapshot indices (separated by "-") or indices separated by ","')
    parser.add_argument('--no_backup', action='store_false', help='do not backup seeded MD data')
    args = parser.parse_args()

    seeded_md(args.system, args.state, args.folder, args.seeds, args.no_backup)
    return None


if __name__ == '__main__':
    __main__()